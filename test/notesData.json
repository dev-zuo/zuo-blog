{
  "category": {
    "JavaScript": [
      {
        "title": "设置允许跨域的响应头后，为什么还是不能跨域",
        "href": "2021/1/cors-allow.html",
        "time": "2021/01/12",
        "description": "在 post 请求中，设置了允许跨域的响应头，且考虑了 preflight 预检请求，但为什么还是报不能跨域的错误呢？下面来看看下面的例子，POST 请求中设置了允许跨域、允许预检的响应头。我们需要深入了解预检请求的过程，预检请求会先发送一个 OPTIONS 的请求去测试服务端是否允许跨域。这个时候我们需要注意，我们也需要处理对应接口的 OPTIONS 请求，上面只处理了接口 URL 的 POST 请求，并没有处理 OPTIONS 请求，可以使用 router.use(url, func) 或者加一个 router.options 请求处理",
        "keywords": "跨域,cors,请求预检"
      }
    ],
    "运维部署与版本控制": [
      {
        "title": "git clone 输错了密码，怎么重新输入或修改密码",
        "href": "2021/4/git_clone_pw_error.html",
        "time": "2021/04/03",
        "description": "在 windows 系统中，如果是第一次拉取代码，而且是使用的 http 方式，涉及到登录的时候，会要求输入 git 相关账号密码，如果账号密码不小心输入错误。后面每次 git clone 都会提示 auth 失败。这时我们可以在 **控制面板 - 用户账户 - 凭据管理器** 里修改对应的密码",
        "keywords": "git clone error,git clone auth fail"
      }
    ]
  },
  "fileData": [
    {
      "htmlStr": "<h1 id=\"设置允许跨域的响应头后，为什么还是不能跨域\">设置允许跨域的响应头后，为什么还是不能跨域</h1>\n<p>在 post 请求中，设置了允许跨域的响应头，且考虑了 preflight 预检请求，但为什么还是报不能跨域的错误呢？下面来看看下面的例子，POST 请求中设置了允许跨域、允许预检的响应头</p>\n<pre><code class=\"language-js\">router.post(&#39;/corsTest&#39;, ctx =&gt; {\n  // 以及允许跨域了\n  ctx.set({\n    &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,\n    &#39;Access-Control-Allow-Methods&#39;: &#39;*&#39;,\n    &#39;Access-Control-Allow-Headers&#39;: &#39;*&#39;\n  })\n  ctx.body = { a: 123 }\n})\n</code></pre>\n<p>我们需要深入了解预检请求的过程，预检请求会先发送一个 OPTIONS 的请求去测试服务端是否允许跨域。这个时候我们需要注意，我们也需要处理对应接口的 OPTIONS 请求，上面只处理了接口 URL 的 POST 请求，并没有处理 OPTIONS 请求，可以使用 router.use(url, func) 或者加一个 router.options 请求处理</p>\n<pre><code class=\"language-js\">// options 预检请求时允许\nrouter.options(&#39;/corsTest&#39;, ctx =&gt; {\n  ctx.set({\n    &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,\n    &#39;Access-Control-Allow-Methods&#39;: &#39;*&#39;,\n    &#39;Access-Control-Allow-Headers&#39;: &#39;*&#39;\n  })\n  ctx.body = {}\n})\n\n// 真实请求\nrouter.post(&#39;/corsTest&#39;, ctx =&gt; {\n  ctx.set({\n    &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,\n    &#39;Access-Control-Allow-Methods&#39;: &#39;*&#39;,\n    &#39;Access-Control-Allow-Headers&#39;: &#39;*&#39;\n  })\n  ctx.body = { a: 123 }\n})\n</code></pre>\n<p>关于请求预检的更多信息参见：<a href=\"http://www.zuo11.com/blog/2020/6/koa_web_cros.html\">CORS跨域资源共享 - 利用koa来彻底理解web前端跨域问题 - 左小白的技术日常</a></p>\n",
      "outline": [
        {
          "type": "heading",
          "raw": "# 设置允许跨域的响应头后，为什么还是不能跨域\n",
          "depth": 1,
          "text": "设置允许跨域的响应头后，为什么还是不能跨域",
          "tokens": [
            {
              "type": "text",
              "raw": "设置允许跨域的响应头后，为什么还是不能跨域",
              "text": "设置允许跨域的响应头后，为什么还是不能跨域"
            }
          ]
        }
      ],
      "config": {
        "title": "设置允许跨域的响应头后，为什么还是不能跨域",
        "staticFileName": "cors-allow.html",
        "author": "guoqzuo",
        "createDate": "2021/01/12",
        "description": "在 post 请求中，设置了允许跨域的响应头，且考虑了 preflight 预检请求，但为什么还是报不能跨域的错误呢？下面来看看下面的例子，POST 请求中设置了允许跨域、允许预检的响应头。我们需要深入了解预检请求的过程，预检请求会先发送一个 OPTIONS 的请求去测试服务端是否允许跨域。这个时候我们需要注意，我们也需要处理对应接口的 OPTIONS 请求，上面只处理了接口 URL 的 POST 请求，并没有处理 OPTIONS 请求，可以使用 router.use(url, func) 或者加一个 router.options 请求处理",
        "keywords": "跨域,cors,请求预检",
        "category": "JavaScript",
        "path": "/v1.0.0/src/notes/2021/1/设置允许跨域的响应头后，为什么还是不能跨域.md",
        "year": "2021",
        "month": "1"
      }
    },
    {
      "htmlStr": "<h1 id=\"git-clone-输错了密码，怎么重新输入或修改密码\">git clone 输错了密码，怎么重新输入或修改密码</h1>\n<p>在 windows 系统中，如果是第一次拉取代码，而且是使用的 http 方式，涉及到登录的时候，会要求输入 git 相关账号密码，如果账号密码不小心输入错误。后面每次 git clone 都会提示 auth 失败。</p>\n<p>这时我们可以在 <strong>控制面板 - 用户账户 - 凭据管理器</strong> 里修改对应的密码</p>\n",
      "outline": [
        {
          "type": "heading",
          "raw": "# git clone 输错了密码，怎么重新输入或修改密码\n\n",
          "depth": 1,
          "text": "git clone 输错了密码，怎么重新输入或修改密码",
          "tokens": [
            {
              "type": "text",
              "raw": "git clone 输错了密码，怎么重新输入或修改密码",
              "text": "git clone 输错了密码，怎么重新输入或修改密码"
            }
          ]
        }
      ],
      "config": {
        "title": "git clone 输错了密码，怎么重新输入或修改密码",
        "staticFileName": "git_clone_pw_error.html",
        "author": "guoqzuo",
        "createDate": "2021/04/03",
        "description": "在 windows 系统中，如果是第一次拉取代码，而且是使用的 http 方式，涉及到登录的时候，会要求输入 git 相关账号密码，如果账号密码不小心输入错误。后面每次 git clone 都会提示 auth 失败。这时我们可以在 **控制面板 - 用户账户 - 凭据管理器** 里修改对应的密码",
        "keywords": "git clone error,git clone auth fail",
        "category": "运维部署与版本控制",
        "path": "/v1.0.0/src/notes/2021/4/git clone 输错了密码，怎么重新输入或修改密码.md",
        "year": "2021",
        "month": "4"
      }
    }
  ],
  "count": 2,
  "config": {
    "title": "左小白的技术日常",
    "isAddBaiduTongji": true,
    "baiduTongjiId": "183281668cc3440449274d1f93c04de6",
    "editOnGithubPrePath": "https://github.com/zuoxiaobai/zuo11.com/edit",
    "indexConfig": {
      "author": "guoqzuo",
      "description": "左小白的技术日常，主要记录和分享web前端领域相关的理解、总结、观点。偶尔会进行一些扩展：比如网站建设、服务器运维、后台数据库等",
      "keywords": "左小白,左小白的技术日常,zuo11.com",
      "linkList": [
        {
          "name": "博客",
          "href": "/blog/category.html"
        },
        {
          "name": "我的笔记",
          "href": "http://fe.zuo11.com",
          "target": "_black"
        },
        {
          "name": "Github",
          "href": "https://github.com/zuoxiaobai",
          "target": "_black"
        }
      ]
    },
    "topRightLink": [
      {
        "name": "我的笔记",
        "href": "http://fe.zuo11.com",
        "target": "_black"
      },
      {
        "name": "Github",
        "href": "https://github.com/zuoxiaobai",
        "target": "_black"
      }
    ],
    "footer": {
      "left": "Copyright © 2016-2021 zuo11.com. <a href='http://beian.miit.gov.cn/'>鄂ICP备16014741号-1</a>",
      "right": "Powered by <a href='https://github.com/zuoxiaobai/zuo-blog' target='_black'>zuo-blog</a>"
    },
    "categorySequence": [
      "Vue",
      "JavaScript",
      "CSS",
      "http与https",
      "前端工程化",
      "React",
      "运维部署与版本控制",
      "计算机基础与开发工具",
      "图表可视化",
      "网站建设与SEO",
      "TypeScript",
      "微信开发",
      "移动端混合开发",
      "后端数据库等",
      "iOS",
      "C与APUE"
    ],
    "asideTopHtml": "<ins class='adsbygoogle' style='display:block;width:300px;height:250px;' data-ad-client='ca-pub-9527676606416641' data-ad-slot='9476232907'></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>",
    "commentTopHtml": "<ins class='adsbygoogle' style='display:block;margin-top:1em;margin-bottom:0' data-ad-format='fluid' data-ad-layout-key='-gw-3+1f-3d+2z' data-ad-client='ca-pub-9527676606416641' data-ad-slot='8870245163'></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>",
    "articleTopHtml": "<ins class='adsbygoogle' style='display:block; text-align:center;' data-ad-layout='in-article' data-ad-format='fluid' data-ad-client='ca-pub-9527676606416641' data-ad-slot='5125924359'></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>",
    "_isGlobalJsFileExists": false,
    "_isGlobalCssFileExists": false
  },
  "validFileList": [
    "./src/notes/2021/1/设置允许跨域的响应头后，为什么还是不能跨域.md",
    "./src/notes/2021/4/git clone 输错了密码，怎么重新输入或修改密码.md"
  ],
  "invalidConfigFileList": [],
  "invalidNameFileList": [
    "./src/notes/2021/1/.DS_Store",
    "./src/notes/2021/4/.DS_Store"
  ]
}